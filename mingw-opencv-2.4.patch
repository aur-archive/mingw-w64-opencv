diff -ur opencv-2.4.10.1.orig/cmake/OpenCVCompilerOptions.cmake opencv-2.4.10.1/cmake/OpenCVCompilerOptions.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVCompilerOptions.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVCompilerOptions.cmake	2015-01-30 12:52:17.356762415 +0100
@@ -253,13 +253,6 @@
   endif()
 endif()
 
-# Extra link libs if the user selects building static libs:
-if(NOT BUILD_SHARED_LIBS AND CMAKE_COMPILER_IS_GNUCXX AND NOT ANDROID)
-  # Android does not need these settings because they are already set by toolchain file
-  set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} stdc++)
-  set(OPENCV_EXTRA_FLAGS "-fPIC ${OPENCV_EXTRA_FLAGS}")
-endif()
-
 # Add user supplied extra options (optimization, etc...)
 # ==========================================================
 set(OPENCV_EXTRA_FLAGS         "${OPENCV_EXTRA_FLAGS}"         CACHE INTERNAL "Extra compiler options")
diff -ur opencv-2.4.10.1.orig/cmake/OpenCVConfig.cmake opencv-2.4.10.1/cmake/OpenCVConfig.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVConfig.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVConfig.cmake	2015-01-30 12:52:17.360095857 +0100
@@ -45,14 +45,7 @@
   endif()
 endif()
 
-if(NOT DEFINED OpenCV_STATIC)
-  # look for global setting
-  if(NOT DEFINED BUILD_SHARED_LIBS OR BUILD_SHARED_LIBS)
-    set(OpenCV_STATIC OFF)
-  else()
-    set(OpenCV_STATIC ON)
-  endif()
-endif()
+set(OpenCV_STATIC ON)
 
 if(NOT DEFINED OpenCV_CUDA)
   # if user' app uses CUDA, then it probably wants CUDA-enabled OpenCV binaries
@@ -105,20 +98,10 @@
 endif()
 
 get_filename_component(OpenCV_CONFIG_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH CACHE)
-if(OpenCV_RUNTIME AND OpenCV_ARCH)
-  if(OpenCV_STATIC AND EXISTS "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake")
-    if(OpenCV_CUDA AND EXISTS "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib/OpenCVConfig.cmake")
-      set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib")
-    else()
-      set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib")
-    endif()
-  elseif(EXISTS "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake")
-    if(OpenCV_CUDA AND EXISTS "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib/OpenCVConfig.cmake")
-      set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib")
-    else()
-      set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib")
-    endif()
-  endif()
+if(OpenCV_CUDA AND EXISTS "${OpenCV_CONFIG_PATH}/../../gpu/lib/OpenCVConfig.cmake")
+  set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/../../gpu/lib")
+else()
+  set(OpenCV_LIB_PATH "${OpenCV_CONFIG_PATH}/../../lib")
 endif()
 
 if(OpenCV_LIB_PATH AND EXISTS "${OpenCV_LIB_PATH}/OpenCVConfig.cmake")
@@ -132,7 +115,7 @@
   if(OpenCV_CUDA)
     set(_OpenCV_LIBS "")
     foreach(_lib ${OpenCV_LIBS})
-      string(REPLACE "${OpenCV_CONFIG_PATH}/gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}" "${OpenCV_CONFIG_PATH}/${OpenCV_ARCH}/${OpenCV_RUNTIME}" _lib2 "${_lib}")
+      string(REPLACE "${OpenCV_CONFIG_PATH}/../../gpu" "${OpenCV_CONFIG_PATH}/../.." _lib2 "${_lib}")
       if(NOT EXISTS "${_lib}" AND EXISTS "${_lib2}")
         list(APPEND _OpenCV_LIBS "${_lib2}")
       else()
@@ -146,14 +129,12 @@
 
   if(NOT OpenCV_FIND_QUIETLY)
     message(STATUS "Found OpenCV ${OpenCV_VERSION} in ${OpenCV_LIB_PATH}")
-    if(NOT OpenCV_LIB_PATH MATCHES "/staticlib")
-      get_filename_component(_OpenCV_LIB_PATH "${OpenCV_LIB_PATH}/../bin" ABSOLUTE)
-      file(TO_NATIVE_PATH "${_OpenCV_LIB_PATH}" _OpenCV_LIB_PATH)
-      message(STATUS "You might need to add ${_OpenCV_LIB_PATH} to your PATH to be able to run your applications.")
-      if(OpenCV_LIB_PATH MATCHES "/gpu/")
-        string(REPLACE "\\gpu" "" _OpenCV_LIB_PATH2 "${_OpenCV_LIB_PATH}")
-        message(STATUS "GPU support is enabled so you might also need ${_OpenCV_LIB_PATH2} in your PATH (it must go after the ${_OpenCV_LIB_PATH}).")
-      endif()
+    get_filename_component(_OpenCV_LIB_PATH "${OpenCV_LIB_PATH}/../bin" ABSOLUTE)
+    file(TO_NATIVE_PATH "${_OpenCV_LIB_PATH}" _OpenCV_LIB_PATH)
+    message(STATUS "You might need to add ${_OpenCV_LIB_PATH} to your PATH to be able to run your applications.")
+    if(OpenCV_LIB_PATH MATCHES "/gpu/")
+      string(REPLACE "\\gpu" "" _OpenCV_LIB_PATH2 "${_OpenCV_LIB_PATH}")
+      message(STATUS "GPU support is enabled so you might also need ${_OpenCV_LIB_PATH2} in your PATH (it must go after the ${_OpenCV_LIB_PATH}).")
     endif()
   endif()
 else()
diff -ur opencv-2.4.10.1.orig/cmake/OpenCVDetectTBB.cmake opencv-2.4.10.1/cmake/OpenCVDetectTBB.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVDetectTBB.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVDetectTBB.cmake	2015-01-30 12:52:17.360095857 +0100
@@ -1,6 +1,6 @@
 if(BUILD_TBB)
   add_subdirectory("${OpenCV_SOURCE_DIR}/3rdparty/tbb")
-  include_directories(SYSTEM ${TBB_INCLUDE_DIRS})
+  include_directories(${TBB_INCLUDE_DIRS})
   set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} tbb)
   add_definitions(-DTBB_USE_GCC_BUILTINS=1 -D__TBB_GCC_BUILTIN_ATOMICS_PRESENT=1)
   if(tbb_need_GENERIC_DWORD_LOAD_STORE)
diff -ur opencv-2.4.10.1.orig/cmake/OpenCVGenConfig.cmake opencv-2.4.10.1/cmake/OpenCVGenConfig.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVGenConfig.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVGenConfig.cmake	2015-01-30 12:52:17.360095857 +0100
@@ -133,13 +133,8 @@
   exec_program(mkdir ARGS "-p \"${CMAKE_BINARY_DIR}/win-install/\"" OUTPUT_VARIABLE RET_VAL)
   configure_file("${OpenCV_SOURCE_DIR}/cmake/templates/OpenCVConfig.cmake.in" "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig.cmake" @ONLY)
   configure_file("${OpenCV_SOURCE_DIR}/cmake/templates/OpenCVConfig-version.cmake.in" "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig-version.cmake" @ONLY)
-  if(BUILD_SHARED_LIBS)
-    install(FILES "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig.cmake" DESTINATION "${OpenCV_INSTALL_BINARIES_PREFIX}lib" COMPONENT dev)
-    install(EXPORT OpenCVModules DESTINATION "${OpenCV_INSTALL_BINARIES_PREFIX}lib" FILE OpenCVModules${modules_file_suffix}.cmake COMPONENT dev)
-  else()
-    install(FILES "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig.cmake" DESTINATION "${OpenCV_INSTALL_BINARIES_PREFIX}staticlib" COMPONENT dev)
-    install(EXPORT OpenCVModules DESTINATION "${OpenCV_INSTALL_BINARIES_PREFIX}staticlib" FILE OpenCVModules${modules_file_suffix}.cmake COMPONENT dev)
-  endif()
+  install(FILES "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig.cmake" DESTINATION "${OpenCV_INSTALL_BINARIES_PREFIX}lib" COMPONENT dev)
+  install(EXPORT OpenCVModules DESTINATION "${OpenCV_INSTALL_BINARIES_PREFIX}lib" FILE OpenCVModules${modules_file_suffix}.cmake COMPONENT dev)
   install(FILES "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig-version.cmake" DESTINATION "${CMAKE_INSTALL_PREFIX}" COMPONENT dev)
   install(FILES "${OpenCV_SOURCE_DIR}/cmake/OpenCVConfig.cmake" DESTINATION "${CMAKE_INSTALL_PREFIX}/" COMPONENT dev)
 endif()
diff -ur opencv-2.4.10.1.orig/cmake/OpenCVGenPkgconfig.cmake opencv-2.4.10.1/cmake/OpenCVGenPkgconfig.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVGenPkgconfig.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVGenPkgconfig.cmake	2015-01-30 13:03:52.739632367 +0100
@@ -45,10 +45,18 @@
   endif()
 
   #need better solution....
-  if(libpath MATCHES "3rdparty")
-    set(installDir "share/OpenCV/3rdparty/${OPENCV_LIB_INSTALL_PATH}")
+  if(libname MATCHES "\\.a$")
+    if(libpath MATCHES "3rdparty")
+      set(installDir "share/OpenCV/3rdparty/${OPENCV_LIB_INSTALL_PATH}")
+    else()
+      set(installDir "${OPENCV_LIB_INSTALL_PATH}")
+    endif()
   else()
-    set(installDir "${OPENCV_LIB_INSTALL_PATH}")
+    if(libpath MATCHES "3rdparty")
+      set(installDir "share/OpenCV/3rdparty/${OPENCV_BIN_INSTALL_PATH}")
+    else()
+      set(installDir "${OPENCV_BIN_INSTALL_PATH}")
+    endif()
   endif()
 
   set(OpenCV_LIB_COMPONENTS_ "${OpenCV_LIB_COMPONENTS_} \${exec_prefix}/${installDir}/${libname}")
diff -ur opencv-2.4.10.1.orig/cmake/OpenCVPCHSupport.cmake opencv-2.4.10.1/cmake/OpenCVPCHSupport.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVPCHSupport.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVPCHSupport.cmake	2015-01-30 12:52:17.360095857 +0100
@@ -24,7 +24,7 @@
     ENDIF()
 
     SET(_PCH_include_prefix "-I")
-    SET(_PCH_isystem_prefix "-isystem")
+    SET(_PCH_isystem_prefix "-I")
     SET(_PCH_define_prefix "-D")
 
 ELSEIF(CMAKE_GENERATOR MATCHES "^Visual.*$")
diff -ur opencv-2.4.10.1.orig/cmake/OpenCVUtils.cmake opencv-2.4.10.1/cmake/OpenCVUtils.cmake
--- opencv-2.4.10.1.orig/cmake/OpenCVUtils.cmake	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/OpenCVUtils.cmake	2015-01-30 12:52:17.360095857 +0100
@@ -42,7 +42,7 @@
     if("${__abs_dir}" MATCHES "^${OpenCV_SOURCE_DIR}" OR "${__abs_dir}" MATCHES "^${OpenCV_BINARY_DIR}")
       list(APPEND __add_before "${dir}")
     else()
-      include_directories(AFTER SYSTEM "${dir}")
+      include_directories(AFTER "${dir}")
     endif()
   endforeach()
   include_directories(BEFORE ${__add_before})
diff -ur opencv-2.4.10.1.orig/cmake/templates/OpenCVConfig.cmake.in opencv-2.4.10.1/cmake/templates/OpenCVConfig.cmake.in
--- opencv-2.4.10.1.orig/cmake/templates/OpenCVConfig.cmake.in	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/cmake/templates/OpenCVConfig.cmake.in	2015-01-30 12:52:17.360095857 +0100
@@ -321,7 +321,7 @@
     if("${__abs_dir}" MATCHES "^${__baseDir}")
       list(APPEND __add_before "${dir}")
     else()
-      include_directories(AFTER SYSTEM "${dir}")
+      include_directories(AFTER "${dir}")
     endif()
   endforeach()
   include_directories(BEFORE ${__add_before})
diff -ur opencv-2.4.10.1.orig/CMakeLists.txt opencv-2.4.10.1/CMakeLists.txt
--- opencv-2.4.10.1.orig/CMakeLists.txt	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/CMakeLists.txt	2015-01-30 12:52:17.360095857 +0100
@@ -269,18 +269,7 @@
   set(OPENCV_DOC_INSTALL_PATH share/OpenCV/doc)
 endif()
 
-if(WIN32)
-  if(DEFINED OpenCV_RUNTIME AND DEFINED OpenCV_ARCH)
-    set(OpenCV_INSTALL_BINARIES_PREFIX "${OpenCV_ARCH}/${OpenCV_RUNTIME}/")
-  else()
-    message(STATUS "Can't detect runtime and/or arch")
-    set(OpenCV_INSTALL_BINARIES_PREFIX "")
-  endif()
-elseif(ANDROID)
-  set(OpenCV_INSTALL_BINARIES_PREFIX "sdk/native/")
-else()
-  set(OpenCV_INSTALL_BINARIES_PREFIX "")
-endif()
+set(OpenCV_INSTALL_BINARIES_PREFIX "")
 
 if(ANDROID)
   set(OPENCV_SAMPLES_BIN_INSTALL_PATH "${OpenCV_INSTALL_BINARIES_PREFIX}samples/${ANDROID_NDK_ABI_NAME}")
@@ -310,12 +299,8 @@
   set(LIBRARY_OUTPUT_PATH         "${OpenCV_BINARY_DIR}/lib")
   set(3P_LIBRARY_OUTPUT_PATH      "${OpenCV_BINARY_DIR}/3rdparty/lib${LIB_SUFFIX}")
   if(WIN32)
-    if(OpenCV_STATIC)
-      set(OPENCV_LIB_INSTALL_PATH   "${OpenCV_INSTALL_BINARIES_PREFIX}staticlib${LIB_SUFFIX}")
-    else()
-      set(OPENCV_LIB_INSTALL_PATH   "${OpenCV_INSTALL_BINARIES_PREFIX}lib${LIB_SUFFIX}")
-    endif()
-    set(OPENCV_3P_LIB_INSTALL_PATH  "${OpenCV_INSTALL_BINARIES_PREFIX}staticlib${LIB_SUFFIX}")
+    set(OPENCV_LIB_INSTALL_PATH   "${OpenCV_INSTALL_BINARIES_PREFIX}lib${LIB_SUFFIX}")
+    set(OPENCV_3P_LIB_INSTALL_PATH  "${OpenCV_INSTALL_BINARIES_PREFIX}lib${LIB_SUFFIX}")
     set(OPENCV_SAMPLES_SRC_INSTALL_PATH    samples/native)
   else()
     set(OPENCV_LIB_INSTALL_PATH     lib${LIB_SUFFIX})
diff -ur opencv-2.4.10.1.orig/modules/highgui/CMakeLists.txt opencv-2.4.10.1/modules/highgui/CMakeLists.txt
--- opencv-2.4.10.1.orig/modules/highgui/CMakeLists.txt	2014-11-05 06:46:55.000000000 +0100
+++ opencv-2.4.10.1/modules/highgui/CMakeLists.txt	2015-01-30 12:52:17.360095857 +0100
@@ -40,7 +40,7 @@
 endif()
 
 if(HAVE_OPENEXR)
-  include_directories(SYSTEM ${OPENEXR_INCLUDE_PATHS})
+  include_directories(${OPENEXR_INCLUDE_PATHS})
   list(APPEND GRFMT_LIBS ${OPENEXR_LIBRARIES})
 endif()
 
@@ -241,7 +241,7 @@
 
 if(WIN32)
   link_directories("${OpenCV_SOURCE_DIR}/3rdparty/lib") # for ffmpeg wrapper only
-  include_directories(AFTER SYSTEM "${OpenCV_SOURCE_DIR}/3rdparty/include") # for directshow in VS2005 and multi-monitor support on MinGW
+  include_directories(AFTER "${OpenCV_SOURCE_DIR}/3rdparty/include") # for directshow in VS2005 and multi-monitor support on MinGW
 endif()
 
 if(UNIX)
